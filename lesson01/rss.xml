<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	
	xmlns:georss="http://www.georss.org/georss"
	xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
	>

<channel>
	<title>ともすた</title>
	<atom:link href="https://tomosta.jp/feed/" rel="self" type="application/rss+xml" />
	<link>https://tomosta.jp</link>
	<description>プログラミング学習コミュニティ</description>
	<lastBuildDate>Tue, 30 Jan 2024 15:09:12 +0000</lastBuildDate>
	<language>ja</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.4.2</generator>

<image>
	<url>https://tomosta.jp/wp-content/uploads/2021/12/manabee_512-150x150.png</url>
	<title>ともすた</title>
	<link>https://tomosta.jp</link>
	<width>32</width>
	<height>32</height>
</image> 
<site xmlns="com-wordpress:feed-additions:1">207465929</site>	<item>
		<title>TypeScriptを直接実行できる『ts-node』</title>
		<link>https://tomosta.jp/2024/01/ts-node/</link>
					<comments>https://tomosta.jp/2024/01/ts-node/#respond</comments>
		
		<dc:creator><![CDATA[ともすた]]></dc:creator>
		<pubDate>Tue, 30 Jan 2024 15:08:17 +0000</pubDate>
				<category><![CDATA[ブログ]]></category>
		<category><![CDATA[JavaScript]]></category>
		<category><![CDATA[TypeScript]]></category>
		<guid isPermaLink="false">https://tomosta.jp/?p=24284</guid>

					<description><![CDATA[JavaScriptでちょっとしたプログラムを作成した時、Node.jsを使って次のようにプログラムを動作させることができます。 しかしこの時、TypeScriptを使って開発をしたいと思った場合は、TypeScript [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>JavaScriptでちょっとしたプログラムを作成した時、Node.jsを使って次のようにプログラムを動作させることができます。</p>



<pre class="wp-block-code"><code>node example.js</code></pre>



<p>しかしこの時、TypeScriptを使って開発をしたいと思った場合は、TypeScriptをJavaScriptにコンパイルしてからでないと動作させることができません。しかし、「ts-node」というツールを利用すると直接実行することができます。</p>



<h2 class="wp-block-heading">Node.js、TypeScriptをインストールしよう</h2>



<p>まずは、Node.jsとTypeScriptはセットアップする必要があるので、まずはNode.jsを次のサイトからダウンロードしてセットアップしましょう。</p>



<ul>
<li><a href="https://nodejs.org/en" target="_blank" rel="noreferrer noopener">Node.js</a></li>
</ul>



<p>そしたら、ターミナルを起動して次のコマンドで、TypeScriptをインストールします。</p>



<pre class="wp-block-code"><code>npm i -g typescript</code></pre>



<p>この時、管理者権限でターミナルを起動するか、先頭に「sudo」を付加しておくと良いでしょう。これで、TypeScriptの開発環境ができました。</p>



<h2 class="wp-block-heading">ts-nodeをインストールしよう</h2>



<p>続いて、「ts-node」をインストールします。ターミナルから次のように入力しましょう。</p>



<pre class="wp-block-code"><code>npm i ts-node</code></pre>



<p>すると、「ts-node」というコマンドが利用できるようになります。これに、TypeScriptのソースプログラムを直接指定しましょう。</p>



<pre class="wp-block-code"><code>ts-node example.ts</code></pre>



<p>すると、TypeScriptのソースが直接実行されるようになり、開発が非常にスムーズになります。もちろん、実際にNode.jsで利用する場合には最後はコンパイル作業が必要になりますが、開発中などはこれを使うと便利でしょう。</p>



<ul>
<li><a href="https://www.npmjs.com/package/ts-node" target="_blank" rel="noreferrer noopener">ts-node</a></li>
</ul>
]]></content:encoded>
					
					<wfw:commentRss>https://tomosta.jp/2024/01/ts-node/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">24284</post-id>	</item>
		<item>
		<title>JavaScriptで小数の計算の誤差を解決する『decimal.js』</title>
		<link>https://tomosta.jp/2024/01/decimal-js/</link>
					<comments>https://tomosta.jp/2024/01/decimal-js/#respond</comments>
		
		<dc:creator><![CDATA[ともすた]]></dc:creator>
		<pubDate>Tue, 30 Jan 2024 01:33:29 +0000</pubDate>
				<category><![CDATA[ブログ]]></category>
		<guid isPermaLink="false">https://tomosta.jp/?p=24279</guid>

					<description><![CDATA[JavaScriptに限らず、コンピュータは小数の計算が苦手です。例えば、次のプログラムを実行してみましょう。 100 × 1.1という計算なので、結果は「110」になるはずです。しかし、JavaScriptで実行すると [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>JavaScriptに限らず、コンピュータは小数の計算が苦手です。例えば、次のプログラムを実行してみましょう。</p>



<pre class="wp-block-code"><code>console.log(100 * 1.1);</code></pre>



<p>100 × 1.1という計算なので、結果は「110」になるはずです。しかし、JavaScriptで実行すると次のように「110.000&#8230;1」などとおかしな数字になってしまいます。</p>



<figure class="wp-block-image aligncenter size-full is-resized"><img decoding="async" width="350" height="72" src="https://tomosta.jp/wp-content/uploads/2024/01/image-13.png" alt="" class="wp-image-24280" style="width:164px;height:auto" srcset="https://tomosta.jp/wp-content/uploads/2024/01/image-13.png 350w, https://tomosta.jp/wp-content/uploads/2024/01/image-13-300x62.png 300w" sizes="(max-width: 350px) 100vw, 350px" /></figure>



<p>これは、コンピュータが数字を2進数で扱っている関係で小数を扱うのが難しく、計算結果に誤差が生まれてしまうというもの。コンピュータで計算をする限りは、逃げることができない現象です。そこで、正しく計算を行えるライブラリを利用すると良いでしょう。</p>



<p>ここでは『deciaml.js』の使い方を紹介しましょう。</p>



<h2 class="wp-block-heading">decimal.jsをインストールしよう</h2>



<p>decimal.jsは、次のGitHubで公開されているので、右上の「Code」ボタンをクリックして「Download ZIP」をクリックしてダウンロードします。</p>



<figure class="wp-block-image size-large"><img fetchpriority="high" decoding="async" width="1024" height="500" src="https://tomosta.jp/wp-content/uploads/2024/01/image-14-1024x500.png" alt="" class="wp-image-24281" srcset="https://tomosta.jp/wp-content/uploads/2024/01/image-14-1024x500.png 1024w, https://tomosta.jp/wp-content/uploads/2024/01/image-14-300x147.png 300w, https://tomosta.jp/wp-content/uploads/2024/01/image-14-768x375.png 768w, https://tomosta.jp/wp-content/uploads/2024/01/image-14-1536x751.png 1536w, https://tomosta.jp/wp-content/uploads/2024/01/image-14.png 1866w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>ソースファイルなどと合わせて「decimal.js」というファイルが見つかるので、これを自分のプログラムから参照できる場所にコピーしましょう。次のようにしてライブラリを組み込みます。</p>



<pre class="wp-block-code"><code>&lt;script src="decimal.js"&gt;&lt;/script&gt;</code></pre>



<h2 class="wp-block-heading">Decimalオブジェクトを使おう</h2>



<p>ライブラリを組み込むと、「Decimal」というオブジェクトが利用できるようになります。次のようにして、新しいインスタンスを準備しましょう。</p>



<pre class="wp-block-code"><code>const tax = new Decimal('1.1');</code></pre>



<p>ここで、カッコ内の「コンストラクタ」に「1.1」という数字を指定しているのですが、両端にシングルクオートがあることに注目しましょう。これは、「文字列」として、1.1という値を渡しています。というのは、ここで数字で渡してしまうと、この時点で誤差が出てしまう恐れがあるため、文字列として扱うことで誤差が生まれないようにしているのです。</p>



<p>同じように計算する相手も作りましょう。</p>



<pre class="wp-block-code"><code>const tax = new Decimal('1.1');
let price = new Decimal('100');</code></pre>



<p>これで準備完了です。</p>



<h2 class="wp-block-heading">かけ算をしよう</h2>



<p>Decimalオブジェクトの場合、計算も普通に計算記号（算術演算子）を使って行うことはできず、すべてメソッドを通じて行います。かけ算をするには「times」メソッドを使いましょう。次のようにします。</p>



<pre class="wp-block-code"><code>let tax_in = price.times(tax).toNumber();</code></pre>



<p>計算結果は「toNumber」メソッドで数字に変換します。これで、計算結果を通常の数字として扱うことができるようになりました。後は、画面に表示すれば完成です。全体のプログラムを確認しましょう。</p>



<pre class="wp-block-code"><code>&lt;script src="decimal.js">&lt;/script>
&lt;script>
    const tax = new Decimal('1.1');
    let price = new Decimal('100');

    //計算したい値をパラメータとして渡し、「times」で掛け算、「toNumber()」で計算結果を数字に変換
    let tax_in = price.times(tax).toNumber();
    console.log(tax_in);
&lt;/script></code></pre>



<p>これで、画面には正しく「110」と表示されます。小数を扱うときには、誤差に注意して計算しましょう。なお、decimal.jsにはこの他にも数学の計算が行えるような、さまざまなメソッドが準備されています。ドキュメントを参照して利用すると良いでしょう。</p>



<ul>
<li><a href="https://mikemcl.github.io/decimal.js/" target="_blank" rel="noreferrer noopener">decimal.js</a></li>
</ul>
]]></content:encoded>
					
					<wfw:commentRss>https://tomosta.jp/2024/01/decimal-js/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">24279</post-id>	</item>
		<item>
		<title>TypeScriptで「ブロック スコープの変数を再宣言することはできません。」と言われたら</title>
		<link>https://tomosta.jp/2024/01/ts-block-scope-error/</link>
					<comments>https://tomosta.jp/2024/01/ts-block-scope-error/#respond</comments>
		
		<dc:creator><![CDATA[ともすた]]></dc:creator>
		<pubDate>Sun, 28 Jan 2024 02:10:27 +0000</pubDate>
				<category><![CDATA[ブログ]]></category>
		<category><![CDATA[JavaScript]]></category>
		<category><![CDATA[TypeScript]]></category>
		<guid isPermaLink="false">https://tomosta.jp/?p=24277</guid>

					<description><![CDATA[Visual Studio Codeで、TypeScriptを使って開発しているとき、変数名のところに「ブロックスコープの変数 'tax' を再宣言することはできません。」というエラーが発生することがあります。 これは、 [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>Visual Studio Codeで、TypeScriptを使って開発しているとき、変数名のところに「ブロックスコープの変数 &#8216;tax&#8217; を再宣言することはできません。」というエラーが発生することがあります。</p>



<p>これは、同じプロジェクト内で同じ変数名を使って宣言した場合に発生するもので、実際に1プロジェクトとして開発している場合には適切なエラーメッセージなため、ブロックを分けたり変数名を変更したり、モジュールにするなどで解決する必要があります。</p>



<p>ただ、単に練習のプログラムを作っていてファイルを分けただけだったり、別々のプログラムの中で反応してしまうということがあり、邪魔に感じることがあります。そんな場合は、「tsconfig.json」でこのチェックを止めることができます。</p>



<h2 class="wp-block-heading">tsconfig.jsonを作ろう</h2>



<p>もしまだ、tsconfig.jsonがない場合は次のコマンドでフォルダ内にtsconfig.jsonを作成します。</p>



<pre class="wp-block-code"><code>tsc init</code></pre>



<p>すると、フォルダ内にtsconfig.jsonファイルができあがります。</p>



<h2 class="wp-block-heading">moduleDetectionオプションを変更しよう</h2>



<p>次に、このtsconfig.jsonファイルをエディタで開き、「moduleDetection」という記述を探します（25行目付近）。</p>



<pre class="wp-block-code"><code>    // "moduleDetection": "auto",                        /* Control what method is used to detect module-format JS files. */</code></pre>



<p>最初は行の先頭に「//」が記述されていて、コメントになっているため、これを取り除きましょう。標準ではこの設定が「auto」になっています。これにより、モジュール単位での変数宣言などをチェックしてくれるようになるため、変数名の重複などが指摘されるようになるのです。</p>



<p>そこでこれを「force」として強制にします。すると、すべてのファイルをモジュールと見なしてくれるため、別のファイルに同じ変数名があっても問題ないと判定されます。</p>



<pre class="wp-block-code"><code>"moduleDetection": "force",                        /* Control what method is used to detect module-format JS files. */</code></pre>



<p>これで保存すれば、警告を消すことができます。</p>
]]></content:encoded>
					
					<wfw:commentRss>https://tomosta.jp/2024/01/ts-block-scope-error/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">24277</post-id>	</item>
		<item>
		<title>Visual Studio Codeをインストールしよう</title>
		<link>https://tomosta.jp/2024/01/install-vscode/</link>
					<comments>https://tomosta.jp/2024/01/install-vscode/#respond</comments>
		
		<dc:creator><![CDATA[ともすた]]></dc:creator>
		<pubDate>Wed, 24 Jan 2024 02:15:26 +0000</pubDate>
				<category><![CDATA[ブログ]]></category>
		<guid isPermaLink="false">https://tomosta.jp/?p=24263</guid>

					<description><![CDATA[Visual Studio CodeはMicrosoftが開発する無償の開発用エディタソフトです。 Web制作や、プログラミング開発に非常に役立つエディタなので、是非インストールして学習などに役立てましょう。 ダウンロー [&#8230;]]]></description>
										<content:encoded><![CDATA[
<div style="position: relative; padding-top: 56.25%;">
  <iframe
    src="https://customer-djyl72dmsv6hsad6.cloudflarestream.com/a104a001bca81cf5531567014bc3f0e4/iframe?preload=true&#038;defaultTextTrack=ja&#038;poster=https%3A%2F%2Fcustomer-djyl72dmsv6hsad6.cloudflarestream.com%2Fa104a001bca81cf5531567014bc3f0e4%2Fthumbnails%2Fthumbnail.jpg%3Ftime%3D%26height%3D600"
    style="border: none; position: absolute; top: 0; left: 0; height: 100%; width: 100%;"
    allow="accelerometer; gyroscope; autoplay; encrypted-media; picture-in-picture;"
    allowfullscreen="true"
  ></iframe>
</div>



<p>Visual Studio CodeはMicrosoftが開発する無償の開発用エディタソフトです。</p>



<p>Web制作や、プログラミング開発に非常に役立つエディタなので、是非インストールして学習などに役立てましょう。</p>



<h2 class="wp-block-heading">ダウンロードしよう</h2>



<p>まずは、Googleなどで「vscode」などで検索をして、<a href="https://code.visualstudio.com/">こちら</a>のサイトにアクセスします。</p>



<figure class="wp-block-image aligncenter size-large"><img decoding="async" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2024/01/image-4-1024x576.png" alt="" class="wp-image-24266" srcset="https://tomosta.jp/wp-content/uploads/2024/01/image-4-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2024/01/image-4-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2024/01/image-4-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2024/01/image-4-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2024/01/image-4.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>アクセスした環境に合わせたダウンロードボタンが表示されるので、これをクリックしましょう。</p>



<p>macOSの場合は、ZIPファイルを展開するとアプリケーションアイコンが現れるので、これをアプリケーションフォルダにドラッグ。</p>



<figure class="wp-block-image aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2024/01/image-5-1024x576.png" alt="" class="wp-image-24267" srcset="https://tomosta.jp/wp-content/uploads/2024/01/image-5-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2024/01/image-5-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2024/01/image-5-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2024/01/image-5-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2024/01/image-5.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>Windowsの場合はセットアッププログラムを起動して、指示に従ってセットアップしていきます。</p>



<figure class="wp-block-image aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2024/01/image-6-1024x576.png" alt="" class="wp-image-24268" srcset="https://tomosta.jp/wp-content/uploads/2024/01/image-6-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2024/01/image-6-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2024/01/image-6-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2024/01/image-6-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2024/01/image-6.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>Launchpadやスタートボタンから起動しましょう。</p>



<figure class="wp-block-image aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2024/01/image-7-1024x576.png" alt="" class="wp-image-24269" srcset="https://tomosta.jp/wp-content/uploads/2024/01/image-7-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2024/01/image-7-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2024/01/image-7-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2024/01/image-7-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2024/01/image-7.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h2 class="wp-block-heading">日本語化しよう</h2>



<p>起動すると最初は英語表記で起動してしまいます。これを日本語化するには「拡張機能」が必要です。</p>



<p>初回起動時には右下にヘルプが出ますが、</p>



<figure class="wp-block-image aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2024/01/image-8-1024x576.png" alt="" class="wp-image-24270" srcset="https://tomosta.jp/wp-content/uploads/2024/01/image-8-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2024/01/image-8-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2024/01/image-8-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2024/01/image-8-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2024/01/image-8.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>見逃した場合などは、左側の「Extensions」をクリックして、検索窓で「Japanese」などと検索します。日本語化の拡張機能がヒットするので「Install」をクリックしてインストールしましょう。</p>



<figure class="wp-block-image aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2024/01/image-9-1024x576.png" alt="" class="wp-image-24271" srcset="https://tomosta.jp/wp-content/uploads/2024/01/image-9-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2024/01/image-9-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2024/01/image-9-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2024/01/image-9-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2024/01/image-9.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>再起動を促されるので再起動すれば、次からは日本語で表示されます。</p>



<h2 class="wp-block-heading">設定を変更しよう</h2>



<p>後は、設定などを好みに合わせて変更していきましょう。</p>



<p>例えば標準ではウィンドウの色などが黒いダークテーマですが、明るいテーマが好きな場合は、左下の「管理」ボタンから「テーマ→配色テーマ」メニューを選ぶと、テーマの一覧が表示されます。</p>



<figure class="wp-block-image aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2024/01/image-10-1024x576.png" alt="" class="wp-image-24272" srcset="https://tomosta.jp/wp-content/uploads/2024/01/image-10-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2024/01/image-10-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2024/01/image-10-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2024/01/image-10-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2024/01/image-10.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>私は「Solarized Light」などが好きです。</p>



<figure class="wp-block-image aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2024/01/image-11-1024x576.png" alt="" class="wp-image-24273" srcset="https://tomosta.jp/wp-content/uploads/2024/01/image-11-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2024/01/image-11-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2024/01/image-11-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2024/01/image-11-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2024/01/image-11.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>また、「アカウント」ボタンをクリックすると、複数の環境にインストールしたVisual Studio Codeの設定などを、同期することもできます。</p>



<figure class="wp-block-image aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2024/01/image-12-1024x576.png" alt="" class="wp-image-24274" srcset="https://tomosta.jp/wp-content/uploads/2024/01/image-12-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2024/01/image-12-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2024/01/image-12-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2024/01/image-12-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2024/01/image-12.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>Microsoftアカウントか、GitHubアカウントでログインできるので、お使いのアカウントで各環境からログインしましょう。</p>



<p>これで、使う準備は完了です活用していきましょう</p>
]]></content:encoded>
					
					<wfw:commentRss>https://tomosta.jp/2024/01/install-vscode/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">24263</post-id>	</item>
		<item>
		<title>kintone入門講座をYouTubeで連載開始しました</title>
		<link>https://tomosta.jp/2024/01/kinotne_basic/</link>
					<comments>https://tomosta.jp/2024/01/kinotne_basic/#respond</comments>
		
		<dc:creator><![CDATA[ともすた]]></dc:creator>
		<pubDate>Wed, 10 Jan 2024 02:19:41 +0000</pubDate>
				<category><![CDATA[お知らせ]]></category>
		<guid isPermaLink="false">https://tomosta.jp/?p=24248</guid>

					<description><![CDATA[YouTubeで新しく『kintone入門』の連載をスタートいたしました。 ライトメンバーシップ以上の方は先行して2章まで公開中です。 連載終了後は、Udemyでの販売およびメンバーシップ限定動画となります。 合わせて、 [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>YouTubeで新しく『<a href="https://youtube.com/watch?v=WXD5If3hDcw" target="_blank" rel="noreferrer noopener">kintone入門</a>』の連載をスタートいたしました。</p>



<p><a href="https://youtube.com/channel/UCphTq6mefx_15CjD35qgXgA/join" target="_blank" rel="noreferrer noopener">ライトメンバーシップ</a>以上の方は先行して2章まで公開中です。</p>



<ul>
<li><a href="https://youtube.com/watch?v=WXD5If3hDcw" target="_blank" rel="noreferrer noopener">kintone入門</a></li>
</ul>



<p>連載終了後は、Udemyでの販売およびメンバーシップ限定動画となります。</p>



<p>合わせて、連載していた『<a href="https://www.youtube.com/playlist?list=PLh6V6_7fbbo8NNyTvkwW7FLkO6qOOd6LO" target="_blank" rel="noreferrer noopener">情報セキュリティマネジメント入門</a>』は、メンバー限定動画となりました。</p>



<p>全編ご視聴いただく場合は<a href="https://www.youtube.com/channel/UCphTq6mefx_15CjD35qgXgA/join" target="_blank" rel="noreferrer noopener">メンバーシップに登録</a>いただくか、<a href="https://www.udemy.com/course/security-chanto/?couponCode=B0CA96F82F96FC59AC3F" target="_blank" rel="noreferrer noopener">Udemy</a>からご購入いただけると幸いです。</p>
]]></content:encoded>
					
					<wfw:commentRss>https://tomosta.jp/2024/01/kinotne_basic/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">24248</post-id>	</item>
		<item>
		<title>Udemyでブラックフライデーセール開催中につき、ともすたの全講座割引クーポン配布中</title>
		<link>https://tomosta.jp/2023/11/udemy_blackfriday/</link>
					<comments>https://tomosta.jp/2023/11/udemy_blackfriday/#respond</comments>
		
		<dc:creator><![CDATA[ともすた]]></dc:creator>
		<pubDate>Sat, 18 Nov 2023 07:57:06 +0000</pubDate>
				<category><![CDATA[お知らせ]]></category>
		<category><![CDATA[Udemy]]></category>
		<guid isPermaLink="false">https://tomosta.jp/?p=23661</guid>

					<description><![CDATA[Udemyで年間で最大のセール期間である「ブラックフライデー」がスタートしました（11/24まで）。 これを記念し、ともすたでこれまでに発売してきたすべての講座について、最安値クーポンをお送りいたします。受講し忘れていた [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>Udemyで年間で最大のセール期間である「ブラックフライデー」がスタートしました（11/24まで）。</p>



<p>これを記念し、ともすたでこれまでに発売してきたすべての講座について、最安値クーポンをお送りいたします。受講し忘れていた講座や、年末年始に向けて学習をしようとしていた分野などありましたら、是非この機会にご利用いただけると幸いです。</p>



<p>今月、新講座として「ざっくり学ぶ、情報セキュリティマネジメント」という講座もリリースしております。サイバー攻撃の種類やその対策方法などを、紹介していますので、こちらも是非ご利用くださいませ。</p>



<h2 class="wp-block-heading">新着・おすすめ</h2>



<figure class="wp-block-embed is-type-rich is-provider-wp-oembed-blog-card wp-block-embed-wp-oembed-blog-card"><div class="wp-block-embed__wrapper">
<div class="wp-oembed-blog-card" data-cached-time="18/11/23 07:59:08"><a href="https://www.udemy.com/course/security-chanto/?couponCode=CHANTOBF2023" target="_blank"><div class="wp-oembed-blog-card__figure"><img decoding="async" src="https://img-c.udemycdn.com/course/480x270/5651040_1f5f.jpg" alt=""></div><div class="wp-oembed-blog-card__body"><div class="wp-oembed-blog-card__content"><div class="wp-oembed-blog-card__title">ざっくり学ぶ、情報セキュリティマネジメント</div><div class="wp-oembed-blog-card__description">マルウェアや不正アクセスなどから、通信を守る基礎知識</div></div><div class="wp-oembed-blog-card__domain"><span class="wp-oembed-blog-card__domain-text">www.udemy.com</span></div></div></a></div>
</div></figure>



<figure class="wp-block-embed is-type-rich is-provider-wp-oembed-blog-card wp-block-embed-wp-oembed-blog-card"><div class="wp-block-embed__wrapper">
<div class="wp-oembed-blog-card" data-cached-time="18/11/23 07:59:08"><a href="https://www.udemy.com/course/astro-chanto/?couponCode=CHANTOBF2023" target="_blank"><div class="wp-oembed-blog-card__figure"><img decoding="async" src="https://img-c.udemycdn.com/course/480x270/5474372_75dc.jpg" alt=""></div><div class="wp-oembed-blog-card__body"><div class="wp-oembed-blog-card__content"><div class="wp-oembed-blog-card__title">ちゃんと学ぶ、Astro</div><div class="wp-oembed-blog-card__description">Astroで学ぶ、ヘッドレスCMS＋Jamstackフレームワークでの実装手法</div></div><div class="wp-oembed-blog-card__domain"><span class="wp-oembed-blog-card__domain-text">www.udemy.com</span></div></div></a></div>
</div></figure>



<h2 class="wp-block-heading">売れ筋講座</h2>



<figure class="wp-block-embed is-type-rich is-provider-wp-oembed-blog-card wp-block-embed-wp-oembed-blog-card"><div class="wp-block-embed__wrapper">
<div class="wp-oembed-blog-card" data-cached-time="18/11/23 07:59:08"><a href="https://www.udemy.com/course/wordpress_master/?couponCode=CHANTOBF2023" target="_blank"><div class="wp-oembed-blog-card__figure"><img decoding="async" src="https://img-c.udemycdn.com/course/480x270/3548106_7adb.jpg" alt=""></div><div class="wp-oembed-blog-card__body"><div class="wp-oembed-blog-card__content"><div class="wp-oembed-blog-card__title">ちゃんと学ぶ、WordPress テーマ開発講座</div><div class="wp-oembed-blog-card__description">WordPressで既存テーマのカスタマイズではない、オリジナルのウェブサイトを作ろう</div></div><div class="wp-oembed-blog-card__domain"><span class="wp-oembed-blog-card__domain-text">www.udemy.com</span></div></div></a></div>
</div></figure>



<figure class="wp-block-embed is-type-rich is-provider-wp-oembed-blog-card wp-block-embed-wp-oembed-blog-card"><div class="wp-block-embed__wrapper">
<div class="wp-oembed-blog-card" data-cached-time="18/11/23 07:59:08"><a href="https://www.udemy.com/course/html-css-js/?couponCode=CHANTOBF2023" target="_blank"><div class="wp-oembed-blog-card__figure"><img decoding="async" src="https://img-c.udemycdn.com/course/480x270/1334522_9c8b_3.jpg" alt=""></div><div class="wp-oembed-blog-card__body"><div class="wp-oembed-blog-card__content"><div class="wp-oembed-blog-card__title">ちゃんと学ぶ、HTML/CSS + JavaScript</div><div class="wp-oembed-blog-card__description">Webの仕事に関わる人なら誰でも必要な、「HTML/CSS」とプログラミング言語「JavaScript」の知識をこれ一本で。基礎の基礎から、jQuery/Vue.jsまで学びます。</div></div><div class="wp-oembed-blog-card__domain"><span class="wp-oembed-blog-card__domain-text">www.udemy.com</span></div></div></a></div>
</div></figure>



<figure class="wp-block-embed is-type-rich is-provider-wp-oembed-blog-card wp-block-embed-wp-oembed-blog-card"><div class="wp-block-embed__wrapper">
<div class="wp-oembed-blog-card" data-cached-time="18/11/23 07:59:08"><a href="https://www.udemy.com/course/php7basic/?couponCode=CHANTOBF2023" target="_blank"><div class="wp-oembed-blog-card__figure"><img decoding="async" src="https://img-b.udemycdn.com/course/480x270/1614778_0fff_3.jpg" alt=""></div><div class="wp-oembed-blog-card__body"><div class="wp-oembed-blog-card__content"><div class="wp-oembed-blog-card__title">ちゃんと学ぶ、PHP+MySQL（MariaDB）入門講座</div><div class="wp-oembed-blog-card__description">本格的なWebシステム開発に欠かせない、サーバーサイドプログラミングをPHP+MySQLで学ぼう。</div></div><div class="wp-oembed-blog-card__domain"><span class="wp-oembed-blog-card__domain-text">www.udemy.com</span></div></div></a></div>
</div></figure>



<figure class="wp-block-embed is-type-rich is-provider-wp-oembed-blog-card wp-block-embed-wp-oembed-blog-card"><div class="wp-block-embed__wrapper">
<div class="wp-oembed-blog-card" data-cached-time="18/11/23 07:59:08"><a href="https://www.udemy.com/course/git-beginning/?couponCode=CHANTOBF2023" target="_blank"><div class="wp-oembed-blog-card__figure"><img decoding="async" src="https://img-c.udemycdn.com/course/480x270/1961628_b1b0_3.jpg" alt=""></div><div class="wp-oembed-blog-card__body"><div class="wp-oembed-blog-card__content"><div class="wp-oembed-blog-card__title">ちゃんと学ぶ、Git/GitHub・SourceTree講座（Win/Mac対応・コマンド対応）</div><div class="wp-oembed-blog-card__description">ファイルのバージョン管理システムGitを、無料で使えるクライアントソフトSourceTreeを使って学びます。</div></div><div class="wp-oembed-blog-card__domain"><span class="wp-oembed-blog-card__domain-text">www.udemy.com</span></div></div></a></div>
</div></figure>



<figure class="wp-block-embed is-type-rich is-provider-wp-oembed-blog-card wp-block-embed-wp-oembed-blog-card"><div class="wp-block-embed__wrapper">
<div class="wp-oembed-blog-card" data-cached-time="18/11/23 07:59:08"><a href="https://www.udemy.com/course/chanto-xd/?couponCode=CHANTOBF2023" target="_blank"><div class="wp-oembed-blog-card__figure"><img decoding="async" src="https://img-c.udemycdn.com/course/480x270/4573614_8cf6_2.jpg" alt=""></div><div class="wp-oembed-blog-card__body"><div class="wp-oembed-blog-card__content"><div class="wp-oembed-blog-card__title">ちゃんと学ぶ、Figma &amp; Adobe XD</div><div class="wp-oembed-blog-card__description">FigmaおよびAdobe XDで作るボタンデザイン、バナーデザインとアプリ設計</div></div><div class="wp-oembed-blog-card__domain"><span class="wp-oembed-blog-card__domain-text">www.udemy.com</span></div></div></a></div>
</div></figure>



<figure class="wp-block-embed is-type-rich is-provider-wp-oembed-blog-card wp-block-embed-wp-oembed-blog-card"><div class="wp-block-embed__wrapper">
<div class="wp-oembed-blog-card" data-cached-time="18/11/23 07:59:08"><a href="https://www.udemy.com/course/php-master/?couponCode=CHANTOBF2023" target="_blank"><div class="wp-oembed-blog-card__figure"><img decoding="async" src="https://img-b.udemycdn.com/course/480x270/3859834_cae5.jpg" alt=""></div><div class="wp-oembed-blog-card__body"><div class="wp-oembed-blog-card__content"><div class="wp-oembed-blog-card__title">ちゃんと学ぶ、PHP 7/8入門講座</div><div class="wp-oembed-blog-card__description">PHPでのプログラミングを、基本からじっくり学ぼう</div></div><div class="wp-oembed-blog-card__domain"><span class="wp-oembed-blog-card__domain-text">www.udemy.com</span></div></div></a></div>
</div></figure>



<h2 class="wp-block-heading">こちらも合わせて</h2>



<figure class="wp-block-embed is-type-rich is-provider-wp-oembed-blog-card wp-block-embed-wp-oembed-blog-card"><div class="wp-block-embed__wrapper">
<div class="wp-oembed-blog-card" data-cached-time="18/11/23 07:59:08"><a href="https://www.udemy.com/course/wordpress-nocode/?couponCode=CHANTOBF2023" target="_blank"><div class="wp-oembed-blog-card__figure"><img decoding="async" src="https://img-c.udemycdn.com/course/480x270/4777084_f054.jpg" alt=""></div><div class="wp-oembed-blog-card__body"><div class="wp-oembed-blog-card__content"><div class="wp-oembed-blog-card__title">ざっくり学ぶ、WordPress 6.xでノーコードサイト制作講座</div><div class="wp-oembed-blog-card__description">WordPressでウェブサイトを作って公開しよう</div></div><div class="wp-oembed-blog-card__domain"><span class="wp-oembed-blog-card__domain-text">www.udemy.com</span></div></div></a></div>
</div></figure>



<figure class="wp-block-embed is-type-rich is-provider-wp-oembed-blog-card wp-block-embed-wp-oembed-blog-card"><div class="wp-block-embed__wrapper">
<div class="wp-oembed-blog-card" data-cached-time="18/11/23 07:59:08"><a href="https://www.udemy.com/course/vscode-basic/?couponCode=CHANTOBF2023" target="_blank"><div class="wp-oembed-blog-card__figure"><img decoding="async" src="https://img-c.udemycdn.com/course/480x270/4010780_0e1e.jpg" alt=""></div><div class="wp-oembed-blog-card__body"><div class="wp-oembed-blog-card__content"><div class="wp-oembed-blog-card__title">ざっくり学ぶ、Visual Studio Codeの使い方講座</div><div class="wp-oembed-blog-card__description">プログラミングに便利なエディターソフト、Visual Studio Codeを使いこなそう</div></div><div class="wp-oembed-blog-card__domain"><span class="wp-oembed-blog-card__domain-text">www.udemy.com</span></div></div></a></div>
</div></figure>



<figure class="wp-block-embed is-type-rich is-provider-wp-oembed-blog-card wp-block-embed-wp-oembed-blog-card"><div class="wp-block-embed__wrapper">
<div class="wp-oembed-blog-card" data-cached-time="18/11/23 07:59:08"><a href="https://www.udemy.com/course/sql-basic/?couponCode=CHANTOBF2023" target="_blank"><div class="wp-oembed-blog-card__figure"><img decoding="async" src="https://img-c.udemycdn.com/course/480x270/2628116_3044_3.jpg" alt=""></div><div class="wp-oembed-blog-card__body"><div class="wp-oembed-blog-card__content"><div class="wp-oembed-blog-card__title">ざっくり学ぶ、データベース+SQL入門講座</div><div class="wp-oembed-blog-card__description">データベースで、顧客データ・商品データ・売上データを効率的に管理しよう。この講座では、操作するための専用言語 SQLを学びながら、MySQLの操作方法を学びます。</div></div><div class="wp-oembed-blog-card__domain"><span class="wp-oembed-blog-card__domain-text">www.udemy.com</span></div></div></a></div>
</div></figure>



<figure class="wp-block-embed is-type-rich is-provider-wp-oembed-blog-card wp-block-embed-wp-oembed-blog-card"><div class="wp-block-embed__wrapper">
<div class="wp-oembed-blog-card" data-cached-time="18/11/23 07:59:08"><a href="https://www.udemy.com/course/scratch-basic/?couponCode=CHANTOBF2023" target="_blank"><div class="wp-oembed-blog-card__figure"><img decoding="async" src="https://img-c.udemycdn.com/course/480x270/2270080_3f0e_2.jpg" alt=""></div><div class="wp-oembed-blog-card__body"><div class="wp-oembed-blog-card__content"><div class="wp-oembed-blog-card__title">Scratch 3で、親子で学べるゲームプログラミング</div><div class="wp-oembed-blog-card__description">ゲームを作って、子どもと楽しみながらプログラミングを学ぶことができます</div></div><div class="wp-oembed-blog-card__domain"><span class="wp-oembed-blog-card__domain-text">www.udemy.com</span></div></div></a></div>
</div></figure>



<figure class="wp-block-embed is-type-rich is-provider-wp-oembed-blog-card wp-block-embed-wp-oembed-blog-card"><div class="wp-block-embed__wrapper">
<div class="wp-oembed-blog-card" data-cached-time="18/11/23 07:59:08"><a href="https://www.udemy.com/course/kintone_basic/?couponCode=CHANTOBF2023" target="_blank"><div class="wp-oembed-blog-card__figure"><img decoding="async" src="https://img-c.udemycdn.com/course/480x270/2169730_ee5d_3.jpg" alt=""></div><div class="wp-oembed-blog-card__body"><div class="wp-oembed-blog-card__content"><div class="wp-oembed-blog-card__title">ざっくり学ぶ、kintone（キントーン）入門講座</div><div class="wp-oembed-blog-card__description">サイボウズ社のビジネスプラットフォーム、kintoneでデータ活用、業務改善を実現</div></div><div class="wp-oembed-blog-card__domain"><span class="wp-oembed-blog-card__domain-text">www.udemy.com</span></div></div></a></div>
</div></figure>
]]></content:encoded>
					
					<wfw:commentRss>https://tomosta.jp/2023/11/udemy_blackfriday/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">23661</post-id>	</item>
		<item>
		<title>Prettierで変なところで改行されるのを防ぐ方法</title>
		<link>https://tomosta.jp/2023/08/prettier_return/</link>
					<comments>https://tomosta.jp/2023/08/prettier_return/#respond</comments>
		
		<dc:creator><![CDATA[ともすた]]></dc:creator>
		<pubDate>Fri, 25 Aug 2023 16:03:17 +0000</pubDate>
				<category><![CDATA[ブログ]]></category>
		<category><![CDATA[Visual Studio Code]]></category>
		<guid isPermaLink="false">https://tomosta.jp/?p=23448</guid>

					<description><![CDATA[Visual Studio Codeに、Prettierプラグインをインストールしてフォーマッタに利用すると、プログラムコードを自動的に整形してくれます。 しかし、標準の状態だと次のようにHTMLタグの途中の変なところで [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p><a href="https://azure.microsoft.com/ja-jp/products/visual-studio-code" target="_blank" rel="noreferrer noopener">Visual Studio Code</a>に、<a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode" target="_blank" rel="noreferrer noopener">Prettier</a>プラグインをインストールしてフォーマッタに利用すると、プログラムコードを自動的に整形してくれます。</p>



<p>しかし、標準の状態だと次のようにHTMLタグの途中の変なところで改行されてしまうことがあります。</p>



<figure class="wp-block-image size-large"><img loading="lazy" decoding="async" width="1024" height="118" src="https://tomosta.jp/wp-content/uploads/2023/08/image-38-1024x118.png" alt="" class="wp-image-23449" srcset="https://tomosta.jp/wp-content/uploads/2023/08/image-38-1024x118.png 1024w, https://tomosta.jp/wp-content/uploads/2023/08/image-38-300x35.png 300w, https://tomosta.jp/wp-content/uploads/2023/08/image-38-768x88.png 768w, https://tomosta.jp/wp-content/uploads/2023/08/image-38-1536x177.png 1536w, https://tomosta.jp/wp-content/uploads/2023/08/image-38.png 1546w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>これを防ぐには、<code>.prettierrc</code>ファイルで設定を変更します。このファイルは、VSCodeのコマンドパレットを表示して、</p>



<pre class="wp-block-code"><code>Prettier: Create Configuration File</code></pre>



<p>コマンドで作成できます。そしたら、次の設定を書き込みましょう。</p>



<pre class="wp-block-code"><code>"printWidth": 1024</code></pre>



<p>これは、1行文の長さとして許容する文字数を指定するもので、<code>1024</code>という数字はてきとうです。好きな数字を入力しましょう。</p>



<p>これで、設定した長さまでであれば変な改行を入れなくなります。</p>



<figure class="wp-block-image size-large"><img loading="lazy" decoding="async" width="1024" height="66" src="https://tomosta.jp/wp-content/uploads/2023/08/image-39-1024x66.png" alt="" class="wp-image-23450" srcset="https://tomosta.jp/wp-content/uploads/2023/08/image-39-1024x66.png 1024w, https://tomosta.jp/wp-content/uploads/2023/08/image-39-300x19.png 300w, https://tomosta.jp/wp-content/uploads/2023/08/image-39-768x49.png 768w, https://tomosta.jp/wp-content/uploads/2023/08/image-39-1536x98.png 1536w, https://tomosta.jp/wp-content/uploads/2023/08/image-39.png 1560w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>
]]></content:encoded>
					
					<wfw:commentRss>https://tomosta.jp/2023/08/prettier_return/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">23448</post-id>	</item>
		<item>
		<title>Next.js 13入門 &#8211; App Router対応</title>
		<link>https://tomosta.jp/2023/08/nextjs13-beginners/</link>
					<comments>https://tomosta.jp/2023/08/nextjs13-beginners/#respond</comments>
		
		<dc:creator><![CDATA[ともすた]]></dc:creator>
		<pubDate>Wed, 23 Aug 2023 10:11:11 +0000</pubDate>
				<category><![CDATA[入門講座]]></category>
		<guid isPermaLink="false">https://tomosta.jp/?p=23327</guid>

					<description><![CDATA[Next.js13で新しく採用された「App Router」というルーティングのしくみに対応した、Next.js入門です。]]></description>
										<content:encoded><![CDATA[
<figure class="wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio"><div class="wp-block-embed__wrapper">
<div class="c-responsive-container-16-9"><iframe loading="lazy" title="Next.js 13入門 - App Router対応" width="1220" height="686" src="https://www.youtube.com/embed/lO-Ulx1rclk?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe></div>
</div></figure>



<p><a href="https://nextjs.org/" target="_blank" rel="noreferrer noopener">Next.js</a>は、JavaScriptフレームワークと呼ばれる種類の1つで、WebサイトやWebアプリなどを開発するためのベースとなる技術です。</p>



<figure class="wp-block-image aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/08/image-1024x576.png" alt="" class="wp-image-23331" srcset="https://tomosta.jp/wp-content/uploads/2023/08/image-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/08/image-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/08/image-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/08/image-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/08/image.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>他にも<a href="https://nuxt.com/" data-type="link" data-id="https://nuxt.com/" target="_blank" rel="noreferrer noopener">Nuxt</a>や<a href="https://kit.svelte.jp/" target="_blank" rel="noreferrer noopener">SvelteKit</a>など、さまざまな種類がありますが、Next.jsはJavaScriptライブラリの「<a href="https://ja.legacy.reactjs.org/" target="_blank" rel="noreferrer noopener">React</a>」を元に開発されていて、本格的なアプリも開発できるのが特徴で、非常に人気があります。</p>



<p>この、Next.jsですが2023年にバージョン13がリリースされ、それまでと大きく仕様が変更されました。特に「Router（ルーター）」という、ページとアドレスを構成するためのしくみの部分が大きく変わり、それまでのものを「Pages Router」、新しい仕様を「App Router」として分けることになりました。</p>



<p>これにより、Next.js 13よりも前の入門記事などで、大きく内容が異なってしまう部分があるため、この記事ではNext.js 13のApp Routerを利用した入門をしてみましょう。最後は、Vercelというホスティングサービスを利用した、サイトの公開作業まで行っていきます。</p>



<h2 class="wp-block-heading">必要な環境を構築しよう</h2>



<p>Next.jsの開発（に限らず、近年のフロントエンド開発）では、<a href="https://nodejs.org/ja" target="_blank" rel="noreferrer noopener">Node.js</a>の環境が必要です。これは、JavaScriptで作られたアプリケーションを実行するための環境で、Next.jsでも多用されています。まずはこれをインストールしましょう。公式サイトからセットアッププログラムをダウンロードします。</p>



<ul>
<li><a href="https://nodejs.org/ja" target="_blank" rel="noreferrer noopener">Node.js</a></li>
</ul>



<p>また、開発エディタにはMicrosoftのVisual Studio Code（VSCode）を利用しましょう。こちらも、ダウンロードしてセットアップしておきましょう。</p>



<ul>
<li><a href="https://code.visualstudio.com/" target="_blank" rel="noreferrer noopener">Visual Studio Code</a></li>
</ul>



<h2 class="wp-block-heading">Next.jsのプロジェクトを作ろう</h2>



<p>それでは、Next.jsのプロジェクトを作成しましょう。これには、「ターミナル」での操作が必要になるため、VSCodeを起動して「ターミナル→新しいターミナル」メニューをクリックします。下側に、新しいパネルが開いてターミナルが起動するので、次のようにコマンドを入力しましょう。</p>



<figure class="wp-block-image aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/08/image-1-1024x576.png" alt="" class="wp-image-23332" srcset="https://tomosta.jp/wp-content/uploads/2023/08/image-1-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/08/image-1-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/08/image-1-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/08/image-1-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/08/image-1.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<pre class="wp-block-code"><code>npx create-next-app@latest</code></pre>



<p>これで、最新のNext.jsを使ったプロジェクトが作成されます。英文でいくつか質問されるので、それぞれ回答していきます。</p>



<figure class="wp-block-image aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/08/image-2-1024x576.png" alt="" class="wp-image-23335" srcset="https://tomosta.jp/wp-content/uploads/2023/08/image-2-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/08/image-2-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/08/image-2-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/08/image-2-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/08/image-2.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<blockquote class="wp-block-quote">
<p><img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2714.png" alt="✔" class="wp-smiley" style="height: 1em; max-height: 1em;" /> What is your project named?</p>
</blockquote>



<p>（プロジェクトの名前はなんですか？）</p>



<p>ディレクトリの名前になるので、半角英数で入力します。</p>



<blockquote class="wp-block-quote">
<p><img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2714.png" alt="✔" class="wp-smiley" style="height: 1em; max-height: 1em;" /> Would you like to use TypeScript?</p>
</blockquote>



<p>（TypeScriptを利用しますか？）</p>



<p>TypeScriptというJavaScriptの上位互換言語を利用するかを選びます。分からない場合は、Noで良いでしょう。</p>



<blockquote class="wp-block-quote">
<p><img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2714.png" alt="✔" class="wp-smiley" style="height: 1em; max-height: 1em;" /> Would you like to use ESLint?</p>
</blockquote>



<p>（ESLintを利用しますか？）</p>



<p>ESLintという検査ツールを利用するかを選びます。学習の段階では不要です。</p>



<blockquote class="wp-block-quote">
<p><img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2714.png" alt="✔" class="wp-smiley" style="height: 1em; max-height: 1em;" /> Would you like to use Tailwind CSS?</p>
</blockquote>



<p>（Tailwind CSSを利用しますか？）</p>



<p>Tailwind CSSというCSSフレームワークを利用するかを選びます。利用しなければ、Noで良いでしょう。</p>



<blockquote class="wp-block-quote">
<p><img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2714.png" alt="✔" class="wp-smiley" style="height: 1em; max-height: 1em;" /> Would you like to use `src/` directory?</p>
</blockquote>



<p>（src/ ディレクトリを使いますか？）</p>



<p>ファイル群を「src」というフォルダの中に含めるかを選びます。特別な理由がなければ、Noで良いでしょう。</p>



<blockquote class="wp-block-quote">
<p><img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2714.png" alt="✔" class="wp-smiley" style="height: 1em; max-height: 1em;" /> Would you like to use App Router? (recommended)</p>
</blockquote>



<p>（App Routerを使いますか（推奨））</p>



<p>Next.js 13以降で採用された「App Router」という仕組みを利用するかを選びます。ここでは、Yesを選びましょう。</p>



<blockquote class="wp-block-quote">
<p><img src="https://s.w.org/images/core/emoji/14.0.0/72x72/2714.png" alt="✔" class="wp-smiley" style="height: 1em; max-height: 1em;" /> Would you like to customize the default import alias?</p>
</blockquote>



<p>（importエイリアスをカスタマイズしますか？）</p>



<p>Noで良いでしょう。</p>



<p>これでしばらく待つと、ディレクトリが生成されて完了します。そしたら、ここでできあがったディレクトリをVSCodeで開きましょう。ターミナル上に表示されているパスにマウスカーソルを重ねると、開くためのリンクが表示されるので、これをクリックしましょう。</p>



<h2 class="wp-block-heading">ファイルの構成を確認しよう</h2>



<p>Next.jsのプロジェクトには、最初からいくつかのファイルやフォルダが含まれています。それぞれ確認していきましょう。</p>



<figure class="wp-block-image aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/08/image-3-1024x576.png" alt="" class="wp-image-23336" srcset="https://tomosta.jp/wp-content/uploads/2023/08/image-3-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/08/image-3-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/08/image-3-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/08/image-3-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/08/image-3.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>・app</p>



<p>このディレクトリ内で開発を進めていきます。</p>



<p>・node_modules</p>



<p>Node.jsの依存ファイル群が含まれます。気にする必要はありませんが、削除しないように気をつけましょう。</p>



<p>・public</p>



<p>画像ファイルなどのリソースファイルをここに格納します。使い方は後述します。</p>



<p>この他、「.gitignore」や「jsconfig.json」など設定ファイル群がありますが、今のところは気にしなくてかまいません。</p>



<h2 class="wp-block-heading">開発サーバーを起動しよう</h2>



<p>Next.jsは「ビルド」という構築作業を行わなければ、Webブラウザに表示することができません。これを毎回行うのは大変なので、内蔵されている開発サーバーを使って表示を確認します。</p>



<p>VSCodeを利用している場合、「package.json」ファイルを開いてみましょう。画面内に「デバッグ」というリンクが表示されるのでこれをクリックします。上部にコマンドの一覧が出るので「dev」を選びましょう。自動的に、次のコマンドが入力されて開発サーバーが起動します。</p>



<figure class="wp-block-image aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/08/image-4-1024x576.png" alt="" class="wp-image-23339" srcset="https://tomosta.jp/wp-content/uploads/2023/08/image-4-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/08/image-4-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/08/image-4-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/08/image-4-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/08/image-4.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<pre class="wp-block-code"><code>npm run dev</code></pre>



<p>すると、開発サーバーのURLが表示されます。ここにマウスカーソルを重ねて「デバッグ」メニューをクリックしましょう。Webブラウザが起動して開始画面が表示されます。これで、準備完了です。</p>



<figure class="wp-block-image aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/08/image-5-1024x576.png" alt="" class="wp-image-23340" srcset="https://tomosta.jp/wp-content/uploads/2023/08/image-5-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/08/image-5-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/08/image-5-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/08/image-5-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/08/image-5.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h2 class="wp-block-heading">ページを変更しよう</h2>



<p>今、WebブラウザにはNext.jsのロゴなどが表示されていますが、これはサンプルファイルとして自動的に生成されたファイルです。次の場所にあります。</p>



<pre class="wp-block-code"><code>app/page.js</code></pre>



<p>これを、VSCodeで開いてみましょう。JavaScriptのプログラムが含まれていますが、HTMLも記述されています。ここに、直接HTMLを記述することができます。</p>



<figure class="wp-block-image aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/08/image-6-1024x576.png" alt="" class="wp-image-23342" srcset="https://tomosta.jp/wp-content/uploads/2023/08/image-6-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/08/image-6-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/08/image-6-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/08/image-6-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/08/image-6.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>一度、サンプルの内容はすべて削除してしまってみましょう。Webブラウザが自動で再読み込みされ、図のようなエラーメッセージが表示されます。</p>



<figure class="wp-block-image aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/08/image-7-1024x576.png" alt="" class="wp-image-23343" srcset="https://tomosta.jp/wp-content/uploads/2023/08/image-7-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/08/image-7-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/08/image-7-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/08/image-7-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/08/image-7.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>これは、Next.jsのファイルとして必要な記述が含まれていないため。Next.jsのページには次の記述が必ず必要です。追記しましょう。</p>



<pre class="wp-block-code"><code>export default function Page() {

}</code></pre>



<p>これは、JavaScriptで外部のファイルから読み込むために必要な記述で、Next.jsでは本体がこれらのファイルを読み込むために、必ずこの記述が必要になります。これを記述して保存すると、画面が真っ白の状態になります。</p>



<p>ここにHTMLを記述していきましょう。次のように追加します。</p>



<pre class="wp-block-code"><code>export default function Page() {
  return (
    &lt;h1&gt;ともすた&lt;/h1&gt;
  )
}</code></pre>



<p>HTMLの前にも、JavaScriptの決まり文句として「return」という記述が必要です。これで、画面には図のように見出しが表示されました。</p>



<figure class="wp-block-image aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/08/image-8-1024x576.png" alt="" class="wp-image-23346" srcset="https://tomosta.jp/wp-content/uploads/2023/08/image-8-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/08/image-8-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/08/image-8-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/08/image-8-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/08/image-8.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h2 class="wp-block-heading">複数行を表示しよう</h2>



<p>では、HTMLを増やしてみましょう。次のように2行するにすることはできるでしょうか？</p>



<pre class="wp-block-code"><code>export default function Page() {
  return (
    &lt;h1&gt;ともすた&lt;/h1&gt;
    &lt;p&gt;ポートフォリオ&lt;/p&gt;
  )
}</code></pre>



<p>これは、エラーになります。</p>



<figure class="wp-block-image aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/08/image-9-1024x576.png" alt="" class="wp-image-23349" srcset="https://tomosta.jp/wp-content/uploads/2023/08/image-9-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/08/image-9-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/08/image-9-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/08/image-9-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/08/image-9.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>Next.jsでは、1つの要素しか扱うことができません。とはいえ、その1つの要素の中に複数の要素が含まれていてもかまわないので、つまりここでは全体を囲む`&lt;div&gt;`タグなどがあれば問題ありません。次のように変更しましょう。</p>



<pre class="wp-block-code"><code>export default function Page() {
  return (
    &lt;div&gt;
      &lt;h1&gt;ともすた&lt;/h1&gt;
      &lt;p&gt;ポートフォリオ&lt;/p&gt;
    &lt;/div&gt;
  )
}</code></pre>



<p>これで問題なく表示されます。</p>



<p>ただしこの場合、HTMLに意味のない`&lt;div&gt;`タグが出力されてしまいます。</p>



<figure class="wp-block-image aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/08/image-10-1024x576.png" alt="" class="wp-image-23351" srcset="https://tomosta.jp/wp-content/uploads/2023/08/image-10-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/08/image-10-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/08/image-10-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/08/image-10-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/08/image-10.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>そこで、タグとしては意味をなさない、次のような記述も利用できます。</p>



<pre class="wp-block-code"><code>export default function Page() {
  return (
    &lt;&gt;
      &lt;h1&gt;ともすた&lt;/h1&gt;
      &lt;p&gt;ポートフォリオ&lt;/p&gt;
    &lt;/&gt;
  )
}</code></pre>



<p>これでエラーも表示されずに、複数のHTML要素を扱うことができます。</p>



<h2 class="wp-block-heading">ページを追加しよう</h2>



<p>続いて別のページを準備してみましょう。例えば、次のアドレス入力してみましょう。</p>



<pre class="wp-block-code"><code>http:&#47;&#47;localhost:3000/about/</code></pre>



<p>現状では、ページは見つからないというエラーページが表示されてしまいます。</p>



<figure class="wp-block-image aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/08/image-11-1024x576.png" alt="" class="wp-image-23353" srcset="https://tomosta.jp/wp-content/uploads/2023/08/image-11-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/08/image-11-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/08/image-11-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/08/image-11-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/08/image-11.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>ここに、実際のページを準備してみましょう。</p>



<p>Next.jsでページを作成するには、`app`フォルダの中に実際にフォルダを作成していきます。例えばここでは、`about`というフォルダを作成すれば、そのままアドレスになります。</p>



<figure class="wp-block-image aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/08/image-12-1024x576.png" alt="" class="wp-image-23355" srcset="https://tomosta.jp/wp-content/uploads/2023/08/image-12-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/08/image-12-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/08/image-12-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/08/image-12-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/08/image-12.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>中に作るページは`page.js`という名前にすると決められているため、このファイルを作成して内容を作成しましょう。</p>



<pre class="wp-block-code"><code>export default function Page() {
  return (
    &lt;&gt;
      &lt;h1&gt;About&lt;/h1&gt;
    &lt;/&gt;
  )
}</code></pre>



<p>ページには、必ず`export default〜`の記述も必要になります。後は、実際の内容を記述すれば完了です。</p>



<p>これで先ほどのアドレスで表示されるようになります。</p>



<figure class="wp-block-image aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/08/image-13-1024x576.png" alt="" class="wp-image-23358" srcset="https://tomosta.jp/wp-content/uploads/2023/08/image-13-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/08/image-13-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/08/image-13-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/08/image-13-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/08/image-13.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>こうして、複数ページのWebサイトを作ることがきます。</p>



<h2 class="wp-block-heading">リンクを張ろう</h2>



<p>では、今作成したファイルにトップページからリンクを張ってみましょう。HTMLでリンクを張る場合は、<code>&lt;a&gt;</code>要素を利用するのが一般的です。</p>



<pre class="wp-block-code"><code>&lt;a href="/about"&gt;ポートフォリオ&lt;/a&gt;</code></pre>



<p>しかし、Next.jsでこの方法を使ってしまうと、無駄なロードが発生してしまって効率的ではありません。Next.jsで準備されている「Link」というコンポーネントを使うと良いでしょう。まずは、<code>app/page.js</code>の先頭で<code>import</code>します。</p>



<pre class="wp-block-code"><code>import Link from 'next/link'</code></pre>



<figure class="wp-block-image aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/08/image-14-1024x576.png" alt="" class="wp-image-23364" srcset="https://tomosta.jp/wp-content/uploads/2023/08/image-14-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/08/image-14-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/08/image-14-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/08/image-14-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/08/image-14.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>そしたら、<code>&lt;Link&gt;</code>というタグが使えるようになります。次のように変更します。</p>



<pre class="wp-block-code"><code>&lt;Link href="about/"&gt;ポートフォリオ&lt;/Link&gt;</code></pre>



<p>これで、リンクを設置できます。こちらは、必要な部分だけロードがされるので効率的に見ることができます。</p>



<figure class="wp-block-image aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/08/image-15-1024x576.png" alt="" class="wp-image-23366" srcset="https://tomosta.jp/wp-content/uploads/2023/08/image-15-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/08/image-15-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/08/image-15-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/08/image-15-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/08/image-15.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h2 class="wp-block-heading">レイアウトを使おう</h2>



<p>現状では、`page.js`というファイルにはHTMLの内容部分しか記載されていません。HTMLの各種基本タグはどこに記載されているのでしょう？　これは、Next.jsの「レイアウト」という機能が使われています。次のファイルをエディタで開いてみましょう。</p>



<pre class="wp-block-code"><code>app/layout.js</code></pre>



<p>ここに、<code>&lt;html&gt;</code>タグなどが記載されています。各画面は、このファイルを使ってページを表示しているというわけです。<code>{children}</code>という部分に、実際のコンテンツが流し込まれます。</p>



<figure class="wp-block-image aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/08/image-16-1024x576.png" alt="" class="wp-image-23368" srcset="https://tomosta.jp/wp-content/uploads/2023/08/image-16-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/08/image-16-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/08/image-16-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/08/image-16-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/08/image-16.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>ただし、このページにも<code>&lt;head&gt;</code>要素は記述されていません。これは、Next.jsによって自動的に生成されていて、必要な部分はファイルの上の部分にある<code>metadata</code>という部分で、定義します。</p>



<figure class="wp-block-image aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/08/image-17-1024x576.png" alt="" class="wp-image-23370" srcset="https://tomosta.jp/wp-content/uploads/2023/08/image-17-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/08/image-17-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/08/image-17-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/08/image-17-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/08/image-17.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>例えば、次のように<code>title</code>と<code>description</code>を定義すると、それぞれ<code>&lt;head&gt;</code>要素内に展開されます。</p>



<pre class="wp-block-code"><code>export const metadata = {
  title: 'ともすた',
  description: 'ともすたの公式サイトです'
}</code></pre>



<p>また、各ページでタイトルなどをカスタマイズしたい場合は、各ページの中で同じように<code>metadata</code>を定義すれば、そちらが優先されます。</p>



<pre class="wp-block-code"><code>export const metadata = {
  title: 'About | ともすた'
}</code></pre>



<figure class="wp-block-image aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/08/image-18-1024x576.png" alt="" class="wp-image-23374" srcset="https://tomosta.jp/wp-content/uploads/2023/08/image-18-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/08/image-18-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/08/image-18-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/08/image-18-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/08/image-18.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h2 class="wp-block-heading">画像を扱おう</h2>



<p>Next.jsで画像を扱いたい場合は、<code>public</code>フォルダ内に保存します。</p>



<figure class="wp-block-image aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/08/image-19-1024x576.png" alt="" class="wp-image-23377" srcset="https://tomosta.jp/wp-content/uploads/2023/08/image-19-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/08/image-19-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/08/image-19-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/08/image-19-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/08/image-19.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>そして、画像を扱うときはHTMLの<code>&lt;img&gt;</code>タグではなく、Next.jsのImageを使っていきます。まずは、<code>import</code>しましょう。</p>



<pre class="wp-block-code"><code>import Image from 'next/image'</code></pre>



<figure class="wp-block-image aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/08/image-20-1024x576.png" alt="" class="wp-image-23379" srcset="https://tomosta.jp/wp-content/uploads/2023/08/image-20-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/08/image-20-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/08/image-20-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/08/image-20-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/08/image-20.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>そして、<code>&lt;Img&gt;</code>というタグを使っていきます。</p>



<pre class="wp-block-code"><code>&lt;Image src="/next.svg" width={150} height={60} alt="Next.js"&gt;</code></pre>



<p>なお、width, heightプロパティは省略するとエラーになるので気をつけましょう。</p>



<figure class="wp-block-image aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/08/image-21-1024x576.png" alt="" class="wp-image-23381" srcset="https://tomosta.jp/wp-content/uploads/2023/08/image-21-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/08/image-21-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/08/image-21-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/08/image-21-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/08/image-21.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h2 class="wp-block-heading">CSSを利用しよう</h2>



<p>続いてCSSを利用しましょう。CSSの場合は、<code>public</code>フォルダではなく、<code>app</code>フォルダに保存できます。（逆に、現状ではpublicに保存したCSSファイルや、CDNなどは<code>&lt;link&gt;</code>タグを出力する手段がないため、取り込むことができないようです）</p>



<p>ここでは、<code>/app/style.css</code>を作成しました。</p>



<pre class="wp-block-code"><code>body {
  color: red;
}</code></pre>



<figure class="wp-block-image aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/08/image-22-1024x576.png" alt="" class="wp-image-23385" srcset="https://tomosta.jp/wp-content/uploads/2023/08/image-22-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/08/image-22-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/08/image-22-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/08/image-22-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/08/image-22.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>これを取り込みましょう。<code>page.js</code>で、次のように<code>import</code>します。</p>



<pre class="wp-block-code"><code>import './style.css'</code></pre>



<p>これで取り込むことができ、文字色が赤くなりました。</p>



<figure class="wp-block-image aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/08/image-23-1024x576.png" alt="" class="wp-image-23388" srcset="https://tomosta.jp/wp-content/uploads/2023/08/image-23-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/08/image-23-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/08/image-23-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/08/image-23-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/08/image-23.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>なお、プロジェクトの作成時に<code>globals.css</code>というファイルが生成されていて、<code>layout.js</code>でこれが読み込まれているので、実際のCSSはこのファイルに記述してあげると、、分かりやすくて良いでしょう。ここでは、次のようなCSSを作ってみました。</p>



<pre class="wp-block-code"><code>.container {
  max-width: 800px;
  margin: 0 auto;
}</code></pre>



<p><code>layout.js</code>の方では、HTMLを少し変更します。</p>



<pre class="wp-block-code"><code>&lt;body&gt;
  &lt;div className={'container'}&gt;
    {children}
  &lt;/div&gt;
&lt;/body&gt;</code></pre>



<figure class="wp-block-image aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/08/image-24-1024x576.png" alt="" class="wp-image-23392" srcset="https://tomosta.jp/wp-content/uploads/2023/08/image-24-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/08/image-24-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/08/image-24-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/08/image-24-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/08/image-24.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h3 class="wp-block-heading">CSS Modulesを使おう</h3>



<p>Next.jsを利用している場合は、globals.cssになんでも書き込むよりは、ファイルごと（コンポーネントと呼びます）ごとに、必要なCSSを記述する「CSS Modules」というしくみを使うと便利です。</p>



<p>例えばここでは、あらかじめ制作されている<code>page.module.css</code>を変更してみましょう。いったん内容を空にして、次のように記述します。</p>



<pre class="wp-block-code"><code>.sitetitle {
  font-size: 3em;
}</code></pre>



<p>そして、これを<code>app/page.js</code>で利用します。</p>



<pre class="wp-block-code"><code>import styles from './page.module.css'
...
&lt;h1 className={styles.sitetitle}&gt;ともすた&lt;/h1&gt;</code></pre>



<p>すると、文字サイズが大きくなりました。</p>



<figure class="wp-block-image aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/08/image-25-1024x576.png" alt="" class="wp-image-23396" srcset="https://tomosta.jp/wp-content/uploads/2023/08/image-25-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/08/image-25-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/08/image-25-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/08/image-25-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/08/image-25.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>このとき、<code>globals.css</code>に書き込む方法と何が違うのかと言えば、生成されるCSSに違いがあります。HTMLのソースを見てみましょう。</p>



<p>次のように、クラス名が<code>.page_sitetitle__KMUI3</code>等と、自動的に名前がつけられます。</p>



<figure class="wp-block-image aligncenter size-large is-resized"><img loading="lazy" decoding="async" src="https://tomosta.jp/wp-content/uploads/2023/08/image-26-1024x576.png" alt="" class="wp-image-23399" style="width:840px;height:473px" width="840" height="473" srcset="https://tomosta.jp/wp-content/uploads/2023/08/image-26-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/08/image-26-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/08/image-26-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/08/image-26-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/08/image-26.png 1920w" sizes="(max-width: 840px) 100vw, 840px" /></figure>



<p>これにより、例えばコンポーネントを複数利用するときに、万が一クラス名が重複していても、自動的に名前が変更されて重複しないように調整されます。CSSを記述しているときには、他のコンポーネントのことを気にしなくて良いということで、CSSの設計などを厳密に行わなくても良くなります。</p>



<p>大規模なWebサイトなどを制作するときには、非常に便利でしょう。</p>



<h2 class="wp-block-heading">Sassを利用しよう</h2>



<p>Next.jsでは、Sassも利用できます。まずは、Node.jsでSassをインストールします。簡易サーバーをいったん終了しましょう。Ctrl+Cで終了します。そしたら、次のコマンドを入力しましょう。</p>



<pre class="wp-block-code"><code>npm install sass --save-dev</code></pre>



<figure class="wp-block-image size-large"><img loading="lazy" decoding="async" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/08/image-27-1024x576.png" alt="" class="wp-image-23402" srcset="https://tomosta.jp/wp-content/uploads/2023/08/image-27-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/08/image-27-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/08/image-27-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/08/image-27-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/08/image-27.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>また、<code>next.config.js</code>に次のように書き込みます。</p>



<pre class="wp-block-code"><code>const path = require('path')
 
module.exports = {
  sassOptions: {
    includePaths: &#91;path.join(__dirname, 'styles')],
  },
}</code></pre>



<p>これで、<code>styles</code>フォルダ内のファイルがコンパイルされるようになります。</p>



<figure class="wp-block-image aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/08/image-28-1024x576.png" alt="" class="wp-image-23405" srcset="https://tomosta.jp/wp-content/uploads/2023/08/image-28-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/08/image-28-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/08/image-28-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/08/image-28-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/08/image-28.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>例えばここでは、<code>styles/style.scss</code>というファイルを作成して、次のように書き込みましょう。</p>



<pre class="wp-block-code"><code>.container {
  h1 {
    color: red;
  }
}</code></pre>



<p>SCSSなので、階層が使えるようになります。</p>



<figure class="wp-block-image aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/08/image-29-1024x576.png" alt="" class="wp-image-23407" srcset="https://tomosta.jp/wp-content/uploads/2023/08/image-29-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/08/image-29-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/08/image-29-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/08/image-29-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/08/image-29.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>これを、<code>page.js</code>で利用します。</p>



<pre class="wp-block-code"><code>import './styles/style.scss'</code></pre>



<p>これで、自動的にコンパイルされた上で適用されるようになりました。</p>



<figure class="wp-block-image aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/08/image-30-1024x576.png" alt="" class="wp-image-23409" srcset="https://tomosta.jp/wp-content/uploads/2023/08/image-30-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/08/image-30-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/08/image-30-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/08/image-30-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/08/image-30.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h2 class="wp-block-heading">Vercelにデプロイしよう</h2>



<p>最後に、ここまで作成したプロジェクトを実際にWebサーバーで公開しましょう。Next.jsは、ホスティング会社のVercelという企業が開発しているフレームワークです。そのため、このVercelとGitHubを使うと、非常に簡単に公開することができます。</p>



<p>まずは、Vercelのアカウントを作成しましょう。GitHubと連携しておくと便利です。</p>



<ul>
<li><a rel="noreferrer noopener" href="https://vercel.com/" target="_blank">Vercel</a></li>
</ul>



<figure class="wp-block-image aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/08/image-31-1024x576.png" alt="" class="wp-image-23412" srcset="https://tomosta.jp/wp-content/uploads/2023/08/image-31-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/08/image-31-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/08/image-31-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/08/image-31-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/08/image-31.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>そして、プロジェクトをGitHubのプライベートリポジトリにコミット・プッシュします。</p>



<figure class="wp-block-image aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/08/image-32-1024x576.png" alt="" class="wp-image-23414" srcset="https://tomosta.jp/wp-content/uploads/2023/08/image-32-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/08/image-32-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/08/image-32-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/08/image-32-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/08/image-32.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>すると、Vercelのリポジトリ一覧に、今プッシュしたリポジトリが表示されるので、これをImportしましょう。</p>



<figure class="wp-block-image aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/08/image-33-1024x576.png" alt="" class="wp-image-23415" srcset="https://tomosta.jp/wp-content/uploads/2023/08/image-33-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/08/image-33-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/08/image-33-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/08/image-33-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/08/image-33.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>設定などは、基本変更しなくても問題ありません。「Deploy」ボタンをクリックしましょう。</p>



<figure class="wp-block-image aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/08/image-34-1024x576.png" alt="" class="wp-image-23417" srcset="https://tomosta.jp/wp-content/uploads/2023/08/image-34-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/08/image-34-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/08/image-34-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/08/image-34-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/08/image-34.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>しばらく待って、「Conguratulations!」と出ればデプロイ完了です。</p>



<figure class="wp-block-image aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/08/image-35-1024x576.png" alt="" class="wp-image-23419" srcset="https://tomosta.jp/wp-content/uploads/2023/08/image-35-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/08/image-35-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/08/image-35-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/08/image-35-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/08/image-35.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>「Continue to Dashboard→Visit」ボタンをクリックすると、実際の画面を確認することができます。</p>



<figure class="wp-block-image aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/08/image-36-1024x576.png" alt="" class="wp-image-23420" srcset="https://tomosta.jp/wp-content/uploads/2023/08/image-36-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/08/image-36-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/08/image-36-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/08/image-36-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/08/image-36.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>こうして、WebサイトやWebアプリを開発して、公開することができます。なおここでは、練習用なのでVercelもGitHubも削除しておきました。（やり方は動画をご覧ください）。</p>
]]></content:encoded>
					
					<wfw:commentRss>https://tomosta.jp/2023/08/nextjs13-beginners/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">23327</post-id>	</item>
		<item>
		<title>Snow Monkeyに「フレックス」と「グリッド」がやって来た</title>
		<link>https://tomosta.jp/2023/07/snow-monkey-flex-grid/</link>
					<comments>https://tomosta.jp/2023/07/snow-monkey-flex-grid/#respond</comments>
		
		<dc:creator><![CDATA[ともすた]]></dc:creator>
		<pubDate>Tue, 04 Jul 2023 03:27:06 +0000</pubDate>
				<category><![CDATA[入門講座]]></category>
		<category><![CDATA[Snow Monkey]]></category>
		<category><![CDATA[WordPress]]></category>
		<guid isPermaLink="false">https://tomosta.jp/?p=23228</guid>

					<description><![CDATA[Snow Monkeyの公式プラグイン『Snow Monkey Blocks』が19.9.0にバージョンアップし、新たに「フレックス」ブロックと「グリッド」ブロックが追加されました。]]></description>
										<content:encoded><![CDATA[
<p>Snow Monkeyの公式プラグイン『Snow Monkey Blocks』が19.9.0にバージョンアップし、新たに「フレックス」ブロックと「グリッド」ブロックが追加されました。</p>



<p>これは、CSSの「Flexible Box」と「CSS Grid Layout」をブロックエディタで利用する事ができるブロックで、それまでの既存ブロックではできないような柔軟なレイアウトが可能になります。</p>



<figure class="wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio"><div class="wp-block-embed__wrapper">
<div class="c-responsive-container-16-9"><iframe loading="lazy" title="Snow Monkeyに「フレックス」が「グリッド」がやって来た" width="1220" height="686" src="https://www.youtube.com/embed/GsdnKOg6XUg?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe></div>
</div></figure>



<h2 class="wp-block-heading">フレックスブロックを使おう</h2>



<p>まずは、フレックスブロックを使って、図のようなナビゲーションを作ってみましょう。ブロックの挿入から「フレックス」を挿入します。</p>



<figure class="wp-block-image size-large"><img loading="lazy" decoding="async" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/07/image-1024x576.png" alt="" class="wp-image-23232" srcset="https://tomosta.jp/wp-content/uploads/2023/07/image-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/07/image-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/07/image-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/07/image-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/07/image.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>ブロック内に、ブロックを挿入するボタンが表示されるので、これをクリックして画像や段落などを自由に追加していきましょう。ここでは、図のような段落を追加しました。</p>



<figure class="wp-block-image size-large"><img loading="lazy" decoding="async" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/07/image-1-1024x576.png" alt="" class="wp-image-23233" srcset="https://tomosta.jp/wp-content/uploads/2023/07/image-1-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/07/image-1-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/07/image-1-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/07/image-1-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/07/image-1.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h3 class="wp-block-heading">横方向に配置しよう</h3>



<p>フレックスブロックの魅力は、要素を縦にも横にも並べることができる点です。ブロックの設定で「方向」を「横」に設定し、「複数行に折り返す」のチェックを外すと、要素が横に並ぶようになります。</p>



<figure class="wp-block-image size-large"><img loading="lazy" decoding="async" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/07/image-2-1024x576.png" alt="" class="wp-image-23234" srcset="https://tomosta.jp/wp-content/uploads/2023/07/image-2-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/07/image-2-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/07/image-2-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/07/image-2-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/07/image-2.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h3 class="wp-block-heading">スタイルを調整しよう</h3>



<p>現状では、すべての要素がくっついているため、スタイル調整の「ブロックの間隔」で調整しましょう。</p>



<figure class="wp-block-image size-large"><img loading="lazy" decoding="async" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/07/image-3-1024x576.png" alt="" class="wp-image-23235" srcset="https://tomosta.jp/wp-content/uploads/2023/07/image-3-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/07/image-3-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/07/image-3-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/07/image-3-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/07/image-3.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h3 class="wp-block-heading">フレックスブロックを入れ子にしよう</h3>



<p>フレックスブロックは、縦に要素を並べるときにも非常に扱いやすいです。ここでは、図のようにアイコンとナビゲーションを並べるために、フレックスブロックを入れ子にしましょう。</p>



<figure class="wp-block-image size-large"><img loading="lazy" decoding="async" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/07/image-4-1024x576.png" alt="" class="wp-image-23237" srcset="https://tomosta.jp/wp-content/uploads/2023/07/image-4-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/07/image-4-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/07/image-4-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/07/image-4-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/07/image-4.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>画像を挿入したら、両方の要素を選択して「ブロックの変換」でフレックスブロックに変更しましょう。縦に並べることができます。</p>



<figure class="wp-block-image size-large"><img loading="lazy" decoding="async" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/07/image-5-1024x576.png" alt="" class="wp-image-23238" srcset="https://tomosta.jp/wp-content/uploads/2023/07/image-5-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/07/image-5-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/07/image-5-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/07/image-5-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/07/image-5.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>この中で、中央揃えにしたり幅を調整したりができるので、こうして4つの要素に画像を挿入して、中央揃えで要素の基本サイズを150pxに設定しました。</p>



<figure class="wp-block-image size-large"><img loading="lazy" decoding="async" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/07/image-6-1024x576.png" alt="" class="wp-image-23240" srcset="https://tomosta.jp/wp-content/uploads/2023/07/image-6-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/07/image-6-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/07/image-6-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/07/image-6-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/07/image-6.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>これで、ナビゲーションの完成です。画面幅が狭い場合は、幅を狭くして1行を保つか、折り返すかも設定の「複数行から折り返す」のチェックで、変更できます。</p>



<figure class="wp-block-image size-large"><img loading="lazy" decoding="async" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/07/image-7-1024x576.png" alt="" class="wp-image-23241" srcset="https://tomosta.jp/wp-content/uploads/2023/07/image-7-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/07/image-7-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/07/image-7-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/07/image-7-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/07/image-7.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h2 class="wp-block-heading">グリッドブロックを使おう</h2>



<p>グリッドブロックは、フレキシブルブロック以上に柔軟なレイアウトができるブロックです。行と列を定義しておき、その中に要素をはめ込んでいくことができます。</p>



<p>ブロック挿入ツールから「グリッド」を選んで挿入したら、中にブロック要素を追加していきます。ここでは、次のようなURLを指定して、ダミーの画像を複数配置しました。</p>



<pre class="wp-block-code"><code>https:&#47;&#47;picsum.photos/id/1/500/250</code></pre>



<p>すると、図のように縦横に並びます。設定を確認すると、「GRID-TEMPLATE-COLUMNS」と「GRID-TEMPLATE-ROWS」という設定があり、ここで行と列の各設定を行うことができます。</p>



<figure class="wp-block-image size-large"><img loading="lazy" decoding="async" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/07/image-8-1024x576.png" alt="" class="wp-image-23243" srcset="https://tomosta.jp/wp-content/uploads/2023/07/image-8-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/07/image-8-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/07/image-8-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/07/image-8-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/07/image-8.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h3 class="wp-block-heading">GRID-TEMPLATE-COLUMNSを設定しよう</h3>



<p>まずは列の設定です。次の各設定ができます。</p>



<ul>
<li>最小幅<br>各要素の最小の幅を決め、画面幅の中に入れられるだけ入れていきます。入らない要素は、次の行に送られます。</li>
</ul>



<p>最小幅を選ぶと「自動反復」という設定項目が増えます。これは、要素数が1行に満たなくなった場合、右側を余白とする（auto-fit）か、幅を広げて領域を埋める（auto-fill）を選ぶことができます。</p>



<ul>
<li>カラム数<br>あらかじめ定めたカラム数になるように、要素の幅を縮めて挿入します。この場合、画面幅が狭くなっても折り返されません。</li>



<li>自由入力<br>カラムの数や幅を直接していることができます。例えば、次のように指定すると列幅の違うカラムを4つ準備できます。</li>
</ul>



<pre class="wp-block-code"><code>100px 200px 300px 400px</code></pre>



<figure class="wp-block-image size-large"><img loading="lazy" decoding="async" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/07/image-9-1024x576.png" alt="" class="wp-image-23244" srcset="https://tomosta.jp/wp-content/uploads/2023/07/image-9-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/07/image-9-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/07/image-9-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/07/image-9-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/07/image-9.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h3 class="wp-block-heading">GRID-TEMPLATE-ROWSを設定しよう</h3>



<p>今度は、行を調整します。行は「行数」と「自由入力」から選ぶことができ、自由入力の場合は次のように各行の高さを指定することもできます。</p>



<pre class="wp-block-code"><code>50px 100px</code></pre>



<figure class="wp-block-image size-large"><img loading="lazy" decoding="async" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/07/image-10-1024x576.png" alt="" class="wp-image-23245" srcset="https://tomosta.jp/wp-content/uploads/2023/07/image-10-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/07/image-10-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/07/image-10-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/07/image-10-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/07/image-10.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>なお、スタイル調整ではフレックスブロックと同様にパディングやブロックの間隔なども調整ができます。</p>



<p>こうして、行と列で柔軟なレイアウトができるのがグリッドレイアウトです。</p>



<h2 class="wp-block-heading">レスポンシブには非対応</h2>



<p>このように、フレックスボックスやCSSグリッドをマウス操作だけで挿入できるようになったSnow Monkey Blocksですが、画面幅ごとの設定などはできません。</p>



<p>そのため例えば、スマホの時は要素を縦に並べたいとか、フレックスブロックを解除したいといったことはできません。これは、WordPressの思想やモンキーレンチさんの思想と関連しているようで、現状では用意する予定はないとのことです。</p>



<p>うまく各画面幅で表示できるように調整するか、Snow Monkey Editorの画面幅ごとの表示・非表示で対応する、または拡張CSSで対応するとよいでしょう。</p>



<h2 class="wp-block-heading">グリッドブロックの進化に期待</h2>



<p>もう一点は、グリッドブロックの機能が現状ではシンプルな点です。CSS Grid自体はもう少し複雑なプロパティで、例えばgrid-templateというプロパティを利用すれば、複数の列や行をまたいだカラムを設定できたり、カラムの順番を変えたりなども可能ですが、これらはサポートされていません。</p>



<p>とはいえ、そこまでのことを設定パネルでやっていくのはかなり大変だと思われ、複雑な機能になるよりはシンプルな機能を目指した方が良いかも知れず、このあたりはバランスが難しいでしょう。</p>



<p>いずれにしても、フレックスボックスやCSSグリッドを、WordPressのブロックエディタで設定できるようになったというのは、非常に使いやすくなり、ありがたいバージョンアップです。</p>



<ul>
<li><a href="https://snow-monkey.2inc.org/" target="_blank" rel="noreferrer noopener">Snow Monkey</a></li>
</ul>
]]></content:encoded>
					
					<wfw:commentRss>https://tomosta.jp/2023/07/snow-monkey-flex-grid/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">23228</post-id>	</item>
		<item>
		<title>Snow Monkeyでページ内リンクがメニューに隠れてしまうときの対処法</title>
		<link>https://tomosta.jp/2023/06/snow-monkey%e3%81%a7%e3%83%9a%e3%83%bc%e3%82%b8%e5%86%85%e3%83%aa%e3%83%b3%e3%82%af%e3%81%8c%e3%83%a1%e3%83%8b%e3%83%a5%e3%83%bc%e3%81%ab%e9%9a%a0%e3%82%8c%e3%81%a6%e3%81%97%e3%81%be%e3%81%86%e3%81%a8/</link>
					<comments>https://tomosta.jp/2023/06/snow-monkey%e3%81%a7%e3%83%9a%e3%83%bc%e3%82%b8%e5%86%85%e3%83%aa%e3%83%b3%e3%82%af%e3%81%8c%e3%83%a1%e3%83%8b%e3%83%a5%e3%83%bc%e3%81%ab%e9%9a%a0%e3%82%8c%e3%81%a6%e3%81%97%e3%81%be%e3%81%86%e3%81%a8/#respond</comments>
		
		<dc:creator><![CDATA[ともすた]]></dc:creator>
		<pubDate>Fri, 23 Jun 2023 14:53:18 +0000</pubDate>
				<category><![CDATA[ブログ]]></category>
		<category><![CDATA[Snow Monkey]]></category>
		<guid isPermaLink="false">https://tomosta.jp/?p=23211</guid>

					<description><![CDATA[Snow Monkeyのメニューバーは、標準で画面上部に固定されて表示されます。 しかし、この状態でページ内リンクを設置すると、次のように見出し部分がメニューの影に隠れてしまいます。内容自体は見られますが、これはちょっと [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>Snow Monkeyのメニューバーは、標準で画面上部に固定されて表示されます。</p>



<p>しかし、この状態でページ内リンクを設置すると、次のように見出し部分がメニューの影に隠れてしまいます。内容自体は見られますが、これはちょっと気になる。</p>



<figure class="wp-block-image size-large"><img loading="lazy" decoding="async" width="1024" height="198" src="https://tomosta.jp/wp-content/uploads/2023/06/image-1024x198.png" alt="" class="wp-image-23216" srcset="https://tomosta.jp/wp-content/uploads/2023/06/image-1024x198.png 1024w, https://tomosta.jp/wp-content/uploads/2023/06/image-300x58.png 300w, https://tomosta.jp/wp-content/uploads/2023/06/image-768x149.png 768w, https://tomosta.jp/wp-content/uploads/2023/06/image-1536x298.png 1536w, https://tomosta.jp/wp-content/uploads/2023/06/image-1920x372.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>そんな時は、「特定リンクをスムーススクロールにする」という方法を使うと解決できます。</p>



<h2 class="wp-block-heading">スムーススクロールを設定しよう</h2>



<p>リンクをスムーススクロールに設定するには、<code>u-smooth-scroll</code>というクラスを付加します。リンク要素の場合は、画面左側の「オプション」から「高度な設定」で「追加CSSクラス」に、<code>u-smooth-scroll</code>と入力します。</p>



<figure class="wp-block-image aligncenter size-full is-resized"><img loading="lazy" decoding="async" src="https://tomosta.jp/wp-content/uploads/2023/06/image-1.png" alt="" class="wp-image-23217" width="386" height="199" srcset="https://tomosta.jp/wp-content/uploads/2023/06/image-1.png 772w, https://tomosta.jp/wp-content/uploads/2023/06/image-1-300x155.png 300w, https://tomosta.jp/wp-content/uploads/2023/06/image-1-768x396.png 768w" sizes="(max-width: 386px) 100vw, 386px" /></figure>



<p>ボタンリストなどの場合は、親要素にクラスを付加することもできます。これで準備完了。</p>



<p>この状態でリンクをクリックすると、画面がするするとスクロールして、見出し部分でしっかり止まってくれるようになります。便利。</p>



<figure class="wp-block-image size-large"><img loading="lazy" decoding="async" width="1024" height="278" src="https://tomosta.jp/wp-content/uploads/2023/06/image-2-1024x278.png" alt="" class="wp-image-23218" srcset="https://tomosta.jp/wp-content/uploads/2023/06/image-2-1024x278.png 1024w, https://tomosta.jp/wp-content/uploads/2023/06/image-2-300x82.png 300w, https://tomosta.jp/wp-content/uploads/2023/06/image-2-768x209.png 768w, https://tomosta.jp/wp-content/uploads/2023/06/image-2-1536x418.png 1536w, https://tomosta.jp/wp-content/uploads/2023/06/image-2-1920x522.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<ul>
<li><a href="https://snow-monkey.2inc.org/2019/06/17/u-smooth-scroll/" target="_blank" rel="noreferrer noopener">特定のリンクをスムーススクロールにする</a></li>
</ul>
]]></content:encoded>
					
					<wfw:commentRss>https://tomosta.jp/2023/06/snow-monkey%e3%81%a7%e3%83%9a%e3%83%bc%e3%82%b8%e5%86%85%e3%83%aa%e3%83%b3%e3%82%af%e3%81%8c%e3%83%a1%e3%83%8b%e3%83%a5%e3%83%bc%e3%81%ab%e9%9a%a0%e3%82%8c%e3%81%a6%e3%81%97%e3%81%be%e3%81%86%e3%81%a8/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">23211</post-id>	</item>
	</channel>
</rss>
